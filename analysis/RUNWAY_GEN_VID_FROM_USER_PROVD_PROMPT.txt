Below is a Python script that automates the video generation process using the Runway API based on your requirements. The script handles prompt reading, task initiation, status polling, and video downloading:

```python
import os
import time
import requests
import json

# Configuration
RUNWAY_API_KEY = os.environ.get("RUNWAYNLL_API_SECRET")  # Set in environment variables
BASE_URL = "https://api.dev.runwayml.com/v1"
PROMPT_FILE = "prompt.txt"
OUTPUT_DIR = "new_runway_generated_videos"
API_VERSION = "2024-11-06"

# Headers for API requests
headers = {
    "Authorization": f"Bearer {RUNWAY_API_KEY}",
    "Content-Type": "application/json",
    "X-Runway-Version": API_VERSION
}

def read_prompt():
    """Read prompt from text file"""
    try:
        with open(PROMPT_FILE, 'r') as f:
            return f.read().strip()
    except FileNotFoundError:
        print(f"Error: {PROMPT_FILE} not found in script directory")
        exit(1)

def create_video_task(prompt):
    """Create image-to-video task in Runway"""
    payload = {
        "promptText": prompt,
        "model": "gen4_turbo",
        "ratio": "1280:720",
        "duration": 10
    }
    
    response = requests.post(
        f"{BASE_URL}/image_to_video",
        headers=headers,
        data=json.dumps(payload)
    )
    
    if response.status_code == 200:
        return response.json()["id"]
    else:
        print(f"Error creating task: {response.status_code} - {response.text}")
        exit(1)

def get_task_status(task_id):
    """Check task status and get output URL when ready"""
    response = requests.get(
        f"{BASE_URL}/tasks/{task_id}",
        headers=headers
    )
    
    if response.status_code == 200:
        task_data = response.json()
        if task_data["status"] == "SUCCEEDED":
            return task_data["output"][0]
        return None
    elif response.status_code == 404:
        print("Error: Task not found")
        exit(1)
    else:
        print(f"Status check error: {response.status_code}")
        return None

def download_video(url, task_id):
    """Download generated video"""
    if not os.path.exists(OUTPUT_DIR):
        os.makedirs(OUTPUT_DIR)
    
    response = requests.get(url)
    filename = f"{OUTPUT_DIR}/video_{task_id}.mp4"
    
    with open(filename, 'wb') as f:
        f.write(response.content)
    return filename

def main():
    # Step 1: Read prompt
    prompt = read_prompt()
    print(f"Using prompt: '{prompt}'")
    
    # Step 2: Create video task
    task_id = create_video_task(prompt)
    print(f"Created task: {task_id}")
    
    # Step 3: Poll for completion
    print("Processing video...", end='', flush=True)
    video_url = None
    
    while not video_url:
        print('.', end='', flush=True)
        time.sleep(10)  # Check every 10 seconds
        video_url = get_task_status(task_id)
    
    # Step 4: Download video
    print("\nDownloading video...")
    filename = download_video(video_url, task_id)
    print(f"Video saved to: {filename}")

if __name__ == "__main__":
    if not RUNWAY_API_KEY:
        print("Error: RUNWAYNLL_API_SECRET environment variable not set")
        print("Get your API key from: https://developers.runwayml.com")
        exit(1)
        
    main()
```

**Setup Instructions:**

1. **Install requirements:**
   ```bash
   pip install requests
   ```

2. **Set API key:**
   - Create API key in [Runway Developer Portal](https://developers.runwayml.com)
   - Set environment variable:
     ```bash
     # Linux/macOS
     export RUNWAYNLL_API_SECRET="your_api_key_here"

     # Windows
     set RUNWAYNLL_API_SECRET="your_api_key_here"
     ```

3. **Create prompt file:**
   - Create `prompt.txt` in same directory as script
   - Add your text prompt (e.g., "A astronaut riding a horse on Mars")

4. **Run script:**
   ```bash
   python runway_generator.py
   ```

**Workflow Details:**
1. Reads prompt from `prompt.txt`
2. Starts video generation task using `/image_to_video` endpoint
3. Polls task status every 10 seconds using `/tasks/{id}`
4. Downloads video to `new_runway_generated_videos/` when ready
5. Saves video with naming pattern `video_{task_id}.mp4`

**Notes:**
- Videos are ephemeral (expire in 24-48 hours) - downloaded immediately
- Uses `gen4_turbo` model with 1280x720 resolution (modify in `create_video_task`)
- Add error handling for production use (rate limits, network issues)
- Ensure account has sufficient credits ($10 minimum via Developer Portal)

**Directory Structure after execution:**
```
├── runway_generator.py
├── prompt.txt
└── new_runway_generated_videos/
    └── video_d2c38174-13bc-40bc-8dd4-1c107e8689f.mp4
```